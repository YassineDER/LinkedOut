name: Alternate CI/CD (Cloud Run)

on:
  push:
    branches:
      - cloudrun
      - main

jobs:
  database:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Copy docker-compose.yml to VM
      uses: garygrossgarten/github-action-scp@release
      with:
        host: ${{ secrets.VM_HOST }}
        local: 'docker-compose.yml'
        username: ${{ secrets.VM_USER }}
        remote: '/home/${{ secrets.VM_USER }}/linkedout/docker-compose.yml'
        privateKey: ${{ secrets.SSH_PRIVATE }}

    - name: Deploying Postgres database container
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.SSH_PRIVATE }}
        script: |
          cd ~/linkedout
          sudo docker compose -f docker-compose.yml down
          sudo docker compose -f docker-compose.yml up -d

  wait-cloud-build:
    runs-on: ubuntu-latest

    steps:
    - name: Auth with Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        project_id: tinypet-404519
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        service_account: 'owner-318@tinypet-404519.iam.gserviceaccount.com'

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: tinypet-404519

    - name: Wait for Cloud Build to finish
      run: |
        BUILD_ID=$(gcloud builds list --format="value(id)" --limit=1 --filter="status=WORKING OR status=QUEUED")
        echo "Polling for Cloud Build trigger completion for build ID: $BUILD_ID"
        TIMEOUT=600
        INTERVAL=30
        ELAPSED=0
    
        while [ $ELAPSED -lt $TIMEOUT ]; do
          STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)")
          echo "Current status: $STATUS"
          if [ "$STATUS" == "SUCCESS" ]; then
            echo "Cloud Build completed successfully."
            break
          elif [ "$STATUS" == "FAILURE" ] || [ "$STATUS" == "CANCELLED" ]; then
            echo "Cloud Build failed or was cancelled."
            exit 1
          fi
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done
    
        if [ $ELAPSED -ge $TIMEOUT ]; then
          echo "Timeout reached. Cloud Build did not complete within the expected time."
          exit 1
        fi

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: wait-cloud-build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        project_id: tinypet-404519
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        service_account: 'owner-318@tinypet-404519.iam.gserviceaccount.com'

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: tinypet-404519

    - name: Get Cloud Run URL
      id: get-url
      run: |
        URL=$(gcloud run services describe linkedout --region=europe-west1 --format='json(metadata.annotations."run.googleapis.com/urls")[0]')
        URL=$(echo $URL | jq -r '.metadata.annotations."run.googleapis.com/urls" | fromjson[0]')
        echo "URL=$URL" >> $GITHUB_ENV
      
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install -g @angular/cli
        npm install -g angular-cli-ghpages
        npm install

    - name: Build and deploy the frontend
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        cd frontend
        echo "export const environment = { production: true, hostUrl: '${{ env.URL }}' };" > src/environments/environment.ts
        ng build --base-href /LinkedOut/ --configuration production
        ngh --dir=dist/browser --no-silent
